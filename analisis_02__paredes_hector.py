# -*- coding: utf-8 -*-
"""ANALISIS_02_ PAREDES_HECTOR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hcHKLotyQRPX4Otcj6qpYi3O8oCHYddf
"""

#Se importa librería pandas
import pandas as pd

#Se importan librerías de gráficos
import matplotlib.pyplot as plt
import matplotlib as mpl

# Convertimos CSV a DataFrame
df = pd.read_csv('synergy_logistics_database.csv')
df.head()

"""# Rutas de Importación y Exportación"""

#Obtenemos datos de exportaciones
df_exp = df[df['direction']=='Exports']

#Se contabilizan exportaciones por rutas
exp = df_exp.groupby(['origin', 'destination', 'transport_mode']).size()

#Se convierten datos a DataFrame
exp=pd.DataFrame(exp)

#Se ordenan los datos de mayor a menor según la cantidad de exportaciones
exp=exp.sort_values(by=[0], ascending=False)

#Se renombra columna index y se convierte a columna
exp.index.name="Exportaciones"
exp.reset_index(inplace=True)

#Se renombra la nueva columna index para indicar la posición cardinal de cada ruta
exp.index.name="Lugar"

#Se renumera la columna de posición de la ruta a partir del 1
exp.index += 1

#Se renombran las columnas de origen, destino y cantidad de exportaciones
exp.columns = ['Origen', 'Destino', 'Medio', 'Exportaciones']

#Se obtienen únicamente las primeras 10 rutas con más exportaciones
exp = exp.head(10)

#Obtenemos datos de importaciones
df_imp = df[df['direction']=='Imports']

#Se contabilizan exportaciones por rutas
imp = df_imp.groupby(['origin', 'destination', 'transport_mode']).size()

#Se convierten datos a DataFrame
imp=pd.DataFrame(imp)

#Se ordenan los datos de mayor a menor según la cantidad de exportaciones
imp=imp.sort_values(by=[0], ascending=False)

#Se renombra columna index y se convierte a columna
imp.index.name="Importaciones"
imp.reset_index(inplace=True)

#Se renombra la nueva columna index para indicar la posición cardinal de cada ruta
imp.index.name="Lugar"

#Se renumera la columna de posición de la ruta a partir del 1
imp.index += 1

#Se renombran las columnas de origen, destino y cantidad de importaciones
imp.columns = ['Origen', 'Destino', 'Medio', 'Importaciones']

#Se obtienen únicamente las primeras 10 rutas con más importaciones
imp = imp.head(10)

"""## Top 10 Rutas de Exportaciones"""

#Título de la tabla
print('Top 10 Rutas de Exportaciones')
print('')

#Se presenta resultado final del top 10 de exportaciones
exp

"""## Top 10 Rutas de Importaciones"""

#Título de la tabla
print('Top 10 Rutas de Importaciones')
print('')

#Se presenta resultado final del top 10 de importaciones
imp

"""# Análisis Importación y Exportación Total"""

#Se calcula valor total de importaciones
total_imp = df_imp['total_value'].sum()

#Se calcula valor total de importaciones
total_exp = df_exp['total_value'].sum()

#Se declara valor total de operaciones
total = total_imp + total_exp

#Se genera tabla de resultados finales de exportación e importación
resultados = pd.DataFrame(columns=['Tipo', 'Valor (Bill $)', '%'])
resultados = resultados.append({'Tipo': 'Importaciones', 'Valor (Bill $)': round(total_imp/1000000000, 2), '%':round(total_imp/total*100, 2)}, ignore_index=True)
resultados = resultados.append({'Tipo': 'Exportaciones', 'Valor (Bill $)': round(total_exp/1000000000, 2), '%':round(total_exp/total*100, 2)}, ignore_index=True)
resultados = resultados.append({'Tipo': 'Total', 'Valor (Bill $)': round(total/1000000000,2), '%':round(total/total*100, 2)}, ignore_index=True)
resultados.set_index(['Tipo'], inplace=True)

"""## Resultados Totales de Importación y Exportación"""

#Título
print('Resultados de Importación y Exportación')
print('')

resultados

"""### Gráfico de pastel"""

#Se obtienen los valores de importaciones y exportaciones
o = resultados[:2]

# Grafico de pastel
o['Valor (Bill $)'].plot(kind='pie', title= 'Valor de exportaciones e importaciones', autopct='%1.2f%%', figsize=(15, 6), startangle=90, shadow=True, fontsize=13, pctdistance=1.2, labels=None)
plt.legend(labels=['Importaciones', 'Exportaciones'], loc='upper left')
plt.ylabel('Valor (%)', color='black', fontsize=15)
plt.show()

"""# Resultados por Medio de Transporte"""

#Se filtran los registros de importaciones por medio de transporte y se suma el valor total de los viajes según el medio de trasnporte
transp_imp = df_imp.groupby('transport_mode')['total_value'].sum()

#Se convierten datos a DataFrame
transp_imp = pd.DataFrame(transp_imp)

#Se ordenan los medios de trasnporte de mayor a menor valor total generado
transp_imp = transp_imp.sort_values(by=['total_value'], ascending=False)

#Se resetea index para colocar la posición cardinal de cada medio de transporte
transp_imp.reset_index(inplace=True)
transp_imp.index.name="Lugar"

#Se renumera la columna de posición del medio de transporte a partir del 1
transp_imp.index += 1

#Se renombran columnas columnas de medio de transporte y valor total
transp_imp.columns = ['Medio de transporte', 'Valor Total Imp (Bill $)']

#Se obtiene porcentaje
transp_imp['%'] = round((transp_imp['Valor Total Imp (Bill $)']/total_imp)*100, 2)

#Se convierte valor del medio de transporte a billones
transp_imp['Valor Total Imp (Bill $)'] = round(transp_imp['Valor Total Imp (Bill $)']/1000000000, 2)

#Se filtran los registros de exportaciones por medio de transporte y se suma el valor total de los viajes según el medio de trasnporte
transp_exp = df_exp.groupby('transport_mode')['total_value'].sum()

#Se convierten datos a DataFrame
transp_exp = pd.DataFrame(transp_exp)

#Se ordenan los medios de trasnporte de mayor a menor valor total generado
transp_exp = transp_exp.sort_values(by=['total_value'], ascending=False)

#Se resetea index para colocar la posición cardinal de cada medio de transporte
transp_exp.reset_index(inplace=True)
transp_exp.index.name="Lugar"

#Se renumera la columna de posición del medio de transporte a partir del 1
transp_exp.index += 1

#Se renombran columnas columnas de medio de transporte y valor total
transp_exp.columns = ['Medio de transporte', 'Valor Total Exp (Bill $)']

#Se obtiene porcentaje
transp_exp['%'] = round((transp_exp['Valor Total Exp (Bill $)']/total_exp)*100, 2)

#Se convierte valor del medio de transporte a billones
transp_exp['Valor Total Exp (Bill $)'] = round(transp_exp['Valor Total Exp (Bill $)']/1000000000, 2)

"""## Valor Total de Importaciones por Medio de Transporte"""

#Título de la tabla
print('Valor Total de Importaciones por Medio de Transporte')

#Total en billones
print(f'Total Importaciones: ${round(total_imp/1000000000, 2)} Billones')
print('')

#Se presenta resultado final de valor generado por medio de transporte para importaciones
transp_imp

"""### Gráfico de pastel"""

#Predeterminar colores
colors = ['steelblue', 'red', 'green', 'yellow']

# Grafico de pastel
transp_imp['Valor Total Imp (Bill $)'].plot(kind='pie', title= 'Importaciones generadas por medios de transporte (%)', autopct='%1.2f%%', figsize=(15, 6), startangle=90, shadow=True, colors=colors, fontsize=13, pctdistance=1.2, labels=None)
plt.legend(labels=transp_imp['Medio de transporte'], loc='upper left')
plt.ylabel('Valor (%)', color='black', fontsize=15)
plt.show()

"""## Valor Total de Exportaciones por Medio de Transporte"""

#Título de la tabla
print('Valor Total de Exportaciones por Medio de Transporte')

#Total en billones
print(f'Total Exportaciones: ${round(total_exp/1000000000, 2)} Billones')
print('')

#Se presenta resultado final de valor generado por medio de transporte para exportaciones
transp_exp

"""### Gráfico de Pastel"""

#Predeterminar colores
colors=['steelblue', 'red', 'yellow', 'green']

# Grafico de pastel
transp_exp['Valor Total Exp (Bill $)'].plot(kind='pie', title= 'Exportaciones generado por medios de transporte', autopct='%1.2f%%', figsize=(15, 6), startangle=135, shadow=True, fontsize=13, colors=colors, pctdistance=1.2, labels=None)
plt.legend(labels=transp_exp['Medio de transporte'], loc='upper left')
plt.ylabel('Valor (%)', color='black', fontsize=15)
plt.show()

"""# Valor de importaciones y exportaciones por país

## Análisis Importación
"""

#Se suman valores totales según país de destino de importación
value_imp=df_imp.groupby('origin')['total_value'].sum()

#Se conviertan datos a formato DataFrame
value_imp=pd.DataFrame(value_imp)

#Se ordenan países según sus valores de importación de mayor a menor
value_imp=value_imp.sort_values(by=['total_value'], ascending=False)

#Se resetea index para colocar la posición cardinal de cada país
value_imp.reset_index(inplace=True)
value_imp.index.name="Lugar"

#Se renumera la columna de posición del país a partir del 1
value_imp.index += 1

#Se renombran columnas de país y valor
value_imp.columns = ['País', 'Valor Imp (Bill $)']

#Se calcula columna de porcentaje del total de cada país
value_imp['% del total'] = (value_imp['Valor Imp (Bill $)']/total_imp)*100

#Se calcula porcentaje acumulado para determinar el 80% del valor
value_imp['% acum'] = value_imp['% del total'].cumsum()

#Se convierte valor total de cada país a billones
value_imp['Valor Imp (Bill $)'] = round(value_imp['Valor Imp (Bill $)']/1000000000, 3)

#Se redondea porcentaje del valor total de cada país
value_imp['% del total'] = round(value_imp['% del total'], 2)

#Se redondea porcentaje acumulado
value_imp['% acum'] = round(value_imp['% acum'], 2)

#Título
print('Valor total de Importaciones por país')

#Se imprime valor total de Importaciones (en billones)
print(f'Total Importaciones: ${round(total_imp/1000000000, 2)} Billones')
print('')

#Se presenta valores finales por país
value_imp

#Se calcula con len la cantidad de países que suman el 80% del valor total de importaciones, 
#todos los menores al 80% acumulado más el primero que reúna 80% o más de acumulado para cumplir el criterio
c_paises_80_imp=len(value_imp[value_imp['% acum']<80])+1

#Se establece filtro que arroje solamente los países que cumplan con el criterio del 80% acumulado
t_paises_80_imp=value_imp[:c_paises_80_imp]

#De los países que cumplan con el criterio del 80% acumulado, se obtiene País y Valor
paises_80_imp=t_paises_80_imp[['País', 'Valor Imp (Bill $)']]

"""### Países que conforman el 80% de las Importaciones"""

#Título
print('Países que conforman el 80% de las Importaciones')

#Se exponen resultados
paises_80_imp

"""#### Gráfico de barras"""

#Obtener tabla con los paises indexados y ordenados por valor de forma inversa paga generar gráfico 
o=paises_80_imp.sort_values(by=['Valor Imp (Bill $)'])
o=o.set_index(['País'])

#Gráfico de barra horizontal
mpl.style.use('ggplot')
o.plot(kind='barh', figsize=(30,20), color='steelblue')
plt.xlabel('Billones de dólares($)', size=25, color='black')
plt.ylabel('Países', size=25, color='black')
plt.title('Países que conforman el 80% de Importaciones', size=30)
plt.xticks(fontsize=25, color='black', fontweight="bold")
plt.yticks(fontsize=25, color='black', fontweight="bold")
plt.legend([])
for i in range(0, len(o)):
  plt.annotate(o.iloc[i,0], xy=(o.iloc[i,0]-1, i-0.1), color='white', fontsize=30, fontweight="bold")
plt.show()

"""## Analisis Exportación"""

#Se suman valores totales según país de origen de exportación
value_exp = df_exp.groupby('origin')['total_value'].sum()

#Se conviertan datos a formato DataFrame
value_exp = pd.DataFrame(value_exp)

#Se ordenan países según sus valores de importación de mayor a menor
value_exp = value_exp.sort_values(by=['total_value'], ascending=False)

#Se resetea index para colocar la posición cardinal de cada país
value_exp.reset_index(inplace=True)
value_exp.index.name="Lugar"

#Se renumera la columna de posición del país a partir del 1
value_exp.index += 1

#Se renombran columnas de país y valor
value_exp.columns = ['País', 'Valor Exp (Bill $)']

#Se calcula columna de porcentaje del total de cada país
value_exp['% del total'] = (value_exp['Valor Exp (Bill $)']/total_exp)*100

#Se calcula porcentaje acumulado para determinar el 80% del valor
value_exp['% acum'] = value_exp['% del total'].cumsum()

#Se convierte valor total de cada país a billones
value_exp['Valor Exp (Bill $)'] = round(value_exp['Valor Exp (Bill $)']/1000000000, 3)

#Se redondea porcentaje del valor total de cada país
value_exp['% del total'] = round(value_exp['% del total'], 2)

#Se redondea porcentaje acumulado
value_exp['% acum'] = round(value_exp['% acum'], 2)

#Título
print('Valor total de Exportaciones por país')

#Se imprime valor total de Importaciones
print(f'Total Exportaciones: ${round(total_exp/1000000000, 2)} Billones')
print('')

#Se presenta valores finales por país (en billones)
value_exp

#Se calcula con len la cantidad de países que suman el 80% del valor total de exportaciones, 
#todos los menores al 80% acumulado más el primero que reúna 80% o más de acumulado para cumplir el criterio
c_paises_80_exp = len(value_exp[value_exp['% acum']<80])+1

#Se establece filtro que arroje solamente los países que cumplan con el criterio del 80% acumulado
t_paises_80_exp = value_exp[:c_paises_80_exp]

#De los países que cumplan con el criterio del 80% acumulado, se obtiene País y Valor
paises_80_exp = t_paises_80_exp[['País', 'Valor Exp (Bill $)']]

"""### Países que conforman el 80% de las Exportaciones"""

#Valor total del 80%
tot = paises_80_exp['Valor Exp (Bill $)'].sum()

#Título
print('Países que conforman el 80% de las Exportaciones')
print('')

#Se exponen resultados
paises_80_exp

"""#### Gráfico de barras"""

#Obtener tabla con los paises indexados y ordenados por valor de forma inversa paga generar gráfico 
o=paises_80_exp.sort_values(by=['Valor Exp (Bill $)'])
o=o.set_index(['País'])

#Gráfico de barra 
mpl.style.use('ggplot')
o.plot(kind='barh', figsize=(30,20), color='steelblue')
plt.xlabel('Billones de dólares($)', size=25, color='black')
plt.ylabel('Países', size=25, color='black')
plt.title('Países que conforman el 80% de Exportaciones', size=30)
plt.xticks(fontsize=25, color='black', fontweight="bold")
plt.yticks(fontsize=25, color='black', fontweight="bold")
plt.legend([])
for i in range(0, len(o)):
  plt.annotate(o.iloc[i,0], xy=(o.iloc[i,0]-2.8, i-0.1), color='white', fontsize=30, fontweight="bold")
plt.show()

"""#Análisis por año"""

#Se suman valores totales por año de la lista de importaciones
value_year_imp = df_imp.groupby('year')['total_value'].sum()

#Se conviertan datos a formato DataFrame
value_year_imp = pd.DataFrame(value_year_imp)

#Se ordenan años del más antiguo al más reciente
value_year_imp = value_year_imp.sort_values(by=['year'], ascending=True)

#Se renombran columnas de año y valor total
value_year_imp.columns = ['Valor (Bill $)']

#Se convierte valor total de cada año a billones
value_year_imp['Valor (Bill $)'] = round(value_year_imp['Valor (Bill $)']/1000000000, 2)

#Se suman valores totales por año de la lista de exportaciones
value_year_exp = df_exp.groupby('year')['total_value'].sum()

#Se conviertan datos a formato DataFrame
value_year_exp = pd.DataFrame(value_year_exp)

#Se ordenan años del más antiguo al más reciente
value_year_exp = value_year_exp.sort_values(by=['year'], ascending=True)

#Se renombran columnas de año y valor total
value_year_exp.columns = ['Valor (Bill $)']

#Se convierte valor total de cada año a billones
value_year_exp['Valor (Bill $)'] = round(value_year_exp['Valor (Bill $)']/1000000000, 2)

"""## Importaciones por año"""

#Título
print('Importaciones por año')
print('')

#Se exponen resultados de importaciones por año
value_year_imp

"""### Gráfica de barras"""

#Gráfico de barra horizontal
mpl.style.use('ggplot')
value_year_imp['Valor (Bill $)'].plot(kind='bar', figsize=(30,20), color='steelblue')
plt.xlabel('Año', size=25, color='black')
plt.ylabel('Billones de dólares($)', size=25, color='black')
plt.title('Importaciones por año', size=30)
plt.xticks(fontsize=25, color='black', fontweight="bold")
plt.yticks(fontsize=25, color='black', fontweight="bold")
plt.legend([])
for i in range(0, len(value_year_imp)):
  plt.annotate(value_year_imp.iloc[i,0], xy=(i-0.12, value_year_imp.iloc[i,0]+0.1), color='black', fontsize=30, fontweight="bold")
plt.show()

"""## Exportaciones por año"""

#Título
print('Exportaciones por año')
print('')

#Resultados
value_year_exp

"""### Gráfico de barras"""

#Gráfico de barra horizontal
mpl.style.use('ggplot')
value_year_exp['Valor (Bill $)'].plot(kind='bar', figsize=(30,20), color='steelblue')
plt.xlabel('Año', size=25, color='black')
plt.ylabel('Billones de dólares($)', size=25, color='black')
plt.title('Exportaciones por año', size=30)
plt.xticks(fontsize=25, color='black', fontweight= 'bold')
plt.yticks(fontsize=25, color='black', fontweight= 'bold')
plt.legend([])
for i in range(0, len(value_year_exp)):
  plt.annotate(value_year_exp.iloc[i,0], xy=(i-0.13, value_year_exp.iloc[i,0]+0.2), color='black', fontsize=30, fontweight= 'bold')
plt.show()

"""# Analisis de clientes"""

#Se suman valores totales por cliente de la lista general
value_comp = df.groupby('company_name')['total_value'].sum()

#Se conviertan datos a formato DataFrame
value_comp = pd.DataFrame(value_comp)

#Se ordenan clientes según sus valores de importación de mayor a menor
value_comp = value_comp.sort_values(by=['total_value'], ascending=False)

#Se resetea index para colocar la posición cardinal de cada cliente
value_comp.reset_index(inplace=True)
value_comp.index.name="Lugar"

#Se renumera la columna de posición del cliente a partir del 1
value_comp.index += 1

#Se renombran columnas de cliente y valor
value_comp.columns = ['Compañía', 'Valor (Bill $)']

#Se calcula columna de porcentaje del total de cada cliente
value_comp['% del total'] = (value_comp['Valor (Bill $)']/total)*100

#Se calcula porcentaje acumulado para determinar el 80% del valor
value_comp['% acum'] = value_comp['% del total'].cumsum()

#Se convierte valor total de cada cliente a billones
value_comp['Valor (Bill $)'] = round(value_comp['Valor (Bill $)']/1000000000, 3)

#Se redondea porcentaje del valor total de cada cliente
value_comp['% del total'] = round(value_comp['% del total'], 2)

#Se redondea porcentaje acumulado
value_comp['% acum'] = round(value_comp['% acum'], 2)

#Se filtran los diez principales clientes 
top_10_comp = value_comp.head(10)

#Total ventas top 10
total_top_10 = top_10_comp['Valor (Bill $)'].sum()

"""## Top 10 Clientes"""

#Título
print('Top 10 Clientes')
#Se calcula total de clientes de la compañía
print(f"Total ventas top 10: ${total_top_10} Billones")
print(f'Cantidad de clientes: {len(value_comp)}')
print('')

#Se presenta valores finales por cliente (en billones)
top_10_comp

"""### Gráfica de barras"""

#Obtener tabla con los clientes indexados y ordenados por valor de forma inversa paga generar gráfico 
o=top_10_comp.sort_values(by=['Valor (Bill $)'])
o=o.set_index(['Compañía'])

#Gráfico de barra horizontal
mpl.style.use('ggplot')
o['Valor (Bill $)'].plot(kind='barh', figsize=(30,20), color='steelblue')
plt.xlabel('Billones de dólares($)', size=25, color='black')
plt.ylabel('Compañías', size=25, color='black')
plt.title('Top 10 Clientes', size=30)
plt.xticks(fontsize=25, color='black', fontweight="bold")
plt.yticks(fontsize=25, color='black', fontweight="bold")
plt.legend([])
for i in range(0, len(o)):
  plt.annotate(o.iloc[i,0], xy=(o.iloc[i,0]-1.2, i-0.1), color='white', fontsize=25, fontweight="bold")
plt.show()